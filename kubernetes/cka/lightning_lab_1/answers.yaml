cat !$/answer7.yaml
k -n admin1401 run --generator=run-pod/v1 secret-1401 --image=busybox -o yaml --save-config=true --dry-run=true --command -- sleep "4800"
cat /var/answers//answer7.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: secret-1401
  name: secret-1401
  namespace: admin1401
spec:
  volumes:
  - name: secret-volume
    secret:
      secretName: dotfile-secret
  containers:
  - command:
    - sleep
    args:
    - "4800"
    image: busybox
    name: secret-admin
    volumeMounts:
    - name: secret-volume
      readOnly: true
      mountPath: "/etc/secret-volume"
master $ cat /var/answers//answer6.md
export ETCDCTL_API=3
etcdctl snapshot save --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key --endpoints=127.0.0.1:2379 /opt/etcd-backup.db
master $ cat /var/answers//answer5.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
  name: mysql-alpha-pvc
  namespace: alpha
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: slow
master $ cat /var/answers//answer4.md
kubectl create deployment  nginx-deploy --image=nginx:1.16
kubectl set image deployment/nginx-deploy nginx=nginx:1.17 --record
master $ cat /var/answers//answer3.md
Make sure the port for the kube-apiserver is correct.

Change port from 2379 to 6443.


Run:

kubectl cluster-info --kubeconfig /root/admin.kubeconfig
master $ cat /var/answers//answer2.md
kubectl -n admin2406 get deployment -o custom-columns=DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[].image,READY_REPLICAS:.status.readyReplicas,NAMESPACE:.metadata.namespace --sort-by=.metadata.name > /opt/admin2406_data
master $ cat /var/answers//answer2-data
DEPLOYMENT CONTAINER_IMAGE READY_REPLICAS NAMESPACE
deploy1 nginx 1 admin2406
deploy2 nginx:alpine 1 admin2406
deploy3 nginx:1.16 <none> admin2406
deploy4 nginx:1.17 1 admin2406
deploy5 nginx:latest 1 admin2406
master $ cat /var/answers//answer1.md
Master Node:
kubectl drain master --ignore-daemonsets
apt-get install kubeadm=1.18.0-00
kubeadm  upgrade plan v1.18.0
kubeadm  upgrade apply v1.18.0
apt-get install kubelet=1.18.0-00
kubectl uncordon master
kubectl drain node01 --ignore-daemonsets


Node01:
apt-get install kubeadm=1.18.0-00
kubeadm upgrade node --kubelet-version v1.18.0
apt-get install kubeket=1.18.0-00


Back on Master:
kubectl uncordon node01
kubectl get pods -o wide | grep gold (make sure this is scheduled on master node)
